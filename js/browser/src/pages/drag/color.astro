---
import Layout from "src/layout.astro"
---

<Layout title="顔色選擇">
    <div
        id="app"
        :style="{backgroundColor:'hsl('+ h + ',' + s + '%,' + l + '%)'}"
    >
        <div class="box" is:raw>
            <span title="色相" ref="h" :style="{top:(h + offset)+'px'}"
            @mousedown="hmd($event)" ></span>
        </div>
        <div class="box" is:raw>
            <span title="饱和" ref="s" :style="{top:(3.6*s + offset)+'px'}"
            @mousedown="smd($event)" ></span>
        </div>
        <div class="box" is:raw>
            <span title="明度" ref="l" :style="{top:(3.6*l + offset)+'px'}"
            @mousedown="lmd($event)" ></span>
        </div>
        <div id="cr" is:raw><p>{{this.rgb}}</p></div>
    </div>
    <script src="https://unpkg.com/vue/dist/vue.js"></script>
    <script is:inline>
        const vm = new Vue({
            el: "#app",
            data() {
                return {
                    offset: -6,
                    h: 360,
                    s: 50,
                    l: 50,
                }
            },
            methods: {
                hmd(e) {
                    document.onmousemove && document.onmouseup()
                    let imaY = e.clientY
                    let schY = this.$refs.h.offsetTop
                    document.onmousemove = eve => {
                        let miraiY = eve.clientY
                        this.h = schY + (miraiY - imaY) - this.offset
                        this.h = Math.min(360, Math.max(this.h, 0))
                        return false
                    }
                },
                smd(e) {
                    document.onmousemove && document.onmouseup()
                    let imaY = e.clientY
                    let schY = this.$refs.s.offsetTop
                    document.onmousemove = eve => {
                        let miraiY = eve.clientY
                        this.s = (schY + (miraiY - imaY) - this.offset) / 3.6
                        this.s = Math.min(100, Math.max(this.s, 0))
                        return false
                    }
                },
                lmd(e) {
                    document.onmousemove && document.onmouseup()
                    let imaY = e.clientY
                    let schY = this.$refs.l.offsetTop
                    document.onmousemove = eve => {
                        let miraiY = eve.clientY
                        this.l = (schY + (miraiY - imaY) - this.offset) / 3.6
                        this.l = Math.min(100, Math.max(this.l, 0))
                        return false
                    }
                },
            },
            computed: {
                rgb() {
                    let [h, s, l] = [this.h, this.s, this.l].map(
                        (v, i) => v / [360, 100, 100][i]
                    )
                    let r, g, b
                    if (s == 0) {
                        r = g = b = l //achromatic
                    } else {
                        const hue2rgb = (p, q, t) => {
                            if (t < 0) t += 1
                            if (t > 1) t -= 1
                            if (t < 1 / 6) return p + (q - p) * 6 * t
                            if (t < 1 / 2) return q
                            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6
                            return p
                        }
                        let q = l < 0.5 ? l * (1 + s) : l + s - l * s
                        let p = 2 * l - q
                        r = hue2rgb(p, q, h + 1 / 3)
                        g = hue2rgb(p, q, h)
                        b = hue2rgb(p, q, h - 1 / 3)
                    }
                    return (
                        "#" +
                        [r, g, b]
                            .map(v =>
                                ("0" + Math.round(255 * v).toString(16)).slice(
                                    -2
                                )
                            )
                            .join("")
                    )
                },
            },
            created: function () {
                document.onmousewheel = e => {
                    this.h -= e.wheelDelta / 30
                    this.h = Math.min(360, Math.max(this.h, 0))
                }
                document.onmouseup = e => {
                    document.onmousemove = null
                }
            },
        })
    </script>
</Layout>
<style>
    #app {
        display: flex;
        flex-wrap: wrap;
    }

    #cr {
        display: flex;
        height: 564px;
        text-shadow: 0 0 18px #fff;
    }

    .box {
        display: flex;
        margin: 100px;
        width: 3px;
        height: 360px;
        border: 2px solid #fff;
        position: relative;
        box-shadow: 0 0 2px #fff;
    }

    .box > span {
        position: absolute;
        width: 9px;
        height: 9px;
        border: 2px solid #fff;
        border-radius: 50%;
        background-color: #fff;
        left: -5px;
        box-shadow: 0 0 2px #000;
    }
</style>
