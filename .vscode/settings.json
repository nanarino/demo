{
    // own global settings
    // 自用全局设置 并不是这个项目的设置
    "git.ignoreMissingGitWarning": true,
    "workbench.editorAssociations": {
        "*.ipynb": "jupyter-notebook"
    },
    // python
    //"python.defaultInterpreterPath": "C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python311\\python.exe",
    //"python.analysis.typeCheckingMode": "strict",
    "[python]": {
        "editor.formatOnType": true,
        "editor.tabSize": 4
    },
    "notebook.cellToolbarLocation": {
        "default": "right",
        "jupyter-notebook": "left"
    },
    "security.workspace.trust.startupPrompt": "never",
    "code-runner.clearPreviousOutput": true,
    "code-runner.runInTerminal": true, // 终端模式
    "code-runner.executorMap": {

        // 常规命令 方便复制修改
        "javascript": "node",
        "c": "cd $dir && gcc $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
        "cpp": "cd $dir && g++ $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
        "kotlinscript": "cd $dir && kotlinc -script $fileName",
        "rust": "cd $dir && rustc $fileName && $dir$fileNameWithoutExt",
        "dart": "dart",
        "python": "py",

        // jdk target 21
        "java": "cd $dir && javac --enable-preview -source 21 -Xlint:preview $fileName && java --enable-preview $fileNameWithoutExt",
        
        // 下面的命令适用于windows的非终端模式 "code-runner.runInTerminal": false,
        // 只对部分命令做了字符集兼容 其他该乱码的还是会乱码
        // "python": "set PYTHONIOENCODING=utf8 && py",
        // "kotlin": "cd $dir && kotlinc $fileName -include-runtime -d $fileNameWithoutExt.jar && java -jar -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8 $fileNameWithoutExt.jar",
    },
    // stylus
    "stylusSupremacy.insertColons": false, // 是否插入冒号
    "stylusSupremacy.insertSemicolons": false, // 是否插入分号
    "stylusSupremacy.insertBraces": false, // 是否插入大括号
    "stylusSupremacy.insertNewLineAroundImports": true, // import之后是否换行
    "stylusSupremacy.insertNewLineAroundBlocks": false, // 两个选择器中是否换行
    "hexeditor.columnWidth": 16,
    "hexeditor.showDecodedText": true,
    "hexeditor.defaultEndianness": "little",
    "hexeditor.inspectorType": "aside",
    "editor.accessibilitySupport": "off",
    "editor.renderControlCharacters": true,
    "editor.fontFamily": "'Fira Code', 'Microsoft Yahei UI'",
    "editor.fontLigatures": true,
    "editor.unicodeHighlight.nonBasicASCII": false,
    // Causes the debug view to automatically appear when a breakpoint is hit. This
    // setting is global and not configurable per-language.
    "debug.openDebug": "openOnDebugBreak",
    // dart
    "dart.warnWhenEditingFilesOutsideWorkspace": false,
    "[dart]": {
        // Automatically format code on save and during typing of certain characters
        // (like `;` and `}`).
        //"editor.formatOnSave": true,
        //"editor.formatOnType": true,
        // Draw a guide line at 80 characters, where Dart's formatting will wrap code.
        //"editor.rulers": [80],
        // Disables built-in highlighting of words that match your selection. Without
        // this, all instances of the selected text will be highlighted, interfering
        // with Dart's ability to highlight only exact references to the selected variable.
        "editor.selectionHighlight": false,
        // By default, VS Code prevents code completion from popping open when in
        // "snippet mode" (editing placeholders in inserted code). Setting this option
        // to `false` stops that and allows completion to open as normal, as if you
        // weren't in a snippet placeholder.
        "editor.suggest.snippetsPreventQuickSuggestions": false,
        // By default, VS Code will pre-select the most recently used item from code
        // completion. This is usually not the most relevant item.
        //
        // "first" will always select top item
        // "recentlyUsedByPrefix" will filter the recently used items based on the
        //     text immediately preceding where completion was invoked.
        "editor.suggestSelection": "first",
        // Allows pressing <TAB> to complete snippets such as `for` even when the
        // completion list is not visible.
        "editor.tabCompletion": "onlySnippets",
        // By default, VS Code will populate code completion with words found in the
        // current file when a language service does not provide its own completions.
        // This results in code completion suggesting words when editing comments and
        // strings. This setting will prevent that.
        "editor.wordBasedSuggestions": "off",
    },
    "[html]": {
        "editor.defaultFormatter": "vscode.html-language-features",
        "editor.tabSize": 2
    },
    // svelte
    "svelte.enable-ts-plugin": true,
    "[svelte]": {
        "editor.tabSize": 2
    },
    "[vue]": {
        "editor.tabSize": 2
    }
}